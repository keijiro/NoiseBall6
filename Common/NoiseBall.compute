#pragma kernel VertexBufferUpdate
#pragma kernel IndexBufferUpdate

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Macros.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Random.hlsl"
#include "Packages/jp.keijiro.noiseshader/Shader/SimplexNoise3D.hlsl"

uint TriangleCount;
float TriangleExtent;
float NoiseFrequency;
float NoiseAmplitude;
float3 NoiseOffset;

RWByteAddressBuffer Vertices;
RWByteAddressBuffer Indices;

// Uniformly distributed random points
float3 RandomPoint(uint seed)
{
    seed *= 2;
    float u = Hash(seed) * 3.141592 * 2;
    float z = Hash(seed + 1) * 2 - 1;
    float w = sqrt(1 - z * z);
    return float3(cos(u) * w, sin(u) * w, z);
}

// Write a vertex data to ByteAddressBuffer
void WriteVertex(uint vidx, float3 p, float3 n)
{
    uint addr_p = vidx * 6 * 4;
    uint addr_n = addr_p + 3 * 4;
    Vertices.Store3(addr_p, asuint(p));
    Vertices.Store3(addr_n, asuint(n));
}

// Kernel 0: Vertex buffer update task
[numthreads(64, 1, 1)]
void VertexBufferUpdate(uint id : SV_DispatchThreadID)
{
    if (id >= TriangleCount) return;

    uint vidx = id * 3;

    // Three random vertices
    float3 v1 = RandomPoint(vidx + 0);
    float3 v2 = RandomPoint(vidx + 1);
    float3 v3 = RandomPoint(vidx + 2);

    // Triangle size normalization
    v2 = normalize(v1 + normalize(v2 - v1) * TriangleExtent);
    v3 = normalize(v1 + normalize(v3 - v1) * TriangleExtent);

    // Noise displacement modifier
    float3 p1 = v1 * NoiseFrequency + NoiseOffset;
    float3 p2 = v2 * NoiseFrequency + NoiseOffset;
    float3 p3 = v3 * NoiseFrequency + NoiseOffset;

    float l1 = SimplexNoise(p1);
    float l2 = SimplexNoise(p2);
    float l3 = SimplexNoise(p3);

    l1 += SimplexNoise(p1 * 2) / 2;
    l2 += SimplexNoise(p2 * 2) / 2;
    l3 += SimplexNoise(p3 * 2) / 2;

    l1 += SimplexNoise(p1 * 4) / 4;
    l2 += SimplexNoise(p2 * 4) / 4;
    l3 += SimplexNoise(p3 * 4) / 4;

    v1 *= 1 + l1 * NoiseAmplitude;
    v2 *= 1 + l2 * NoiseAmplitude;
    v3 *= 1 + l3 * NoiseAmplitude;

    // Normal vector
    float3 n = normalize(cross(v2 - v1, v3 - v1));

    // Write to the vertex buffer.
    WriteVertex(vidx + 0, v1, n);
    WriteVertex(vidx + 1, v2, n);
    WriteVertex(vidx + 2, v3, n);
}

// Kernel 1: Index buffer update task
[numthreads(64, 1, 1)]
void IndexBufferUpdate(uint id : SV_DispatchThreadID)
{
    if (id >= TriangleCount) return;

    uint iidx = id * 3;

    Indices.Store3(iidx * 4, uint3(iidx, iidx + 1, iidx + 2));
}
